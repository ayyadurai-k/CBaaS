# Generated by hand for consolidated initial schema (documents)
import uuid
from django.db import migrations, models
import django.db.models.deletion
import pgvector.django.vector


EMBEDDING_DIM = (
    1536  # must match your embedding model (e.g., OpenAI text-embedding-3-small)
)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("organizations", "0001_initial"),
    ]

    operations = [
        # 0) Ensure pgvector extension exists before creating any VectorField columns
        migrations.RunSQL(
            sql="CREATE EXTENSION IF NOT EXISTS vector;",
            reverse_sql=migrations.RunSQL.noop,
        ),
        # 1) Document
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        primary_key=True,
                        default=uuid.uuid4,
                        editable=False,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "file_type",
                    models.CharField(
                        max_length=10,
                        choices=[
                            ("pdf", "pdf"),
                            ("docx", "docx"),
                            ("txt", "txt"),
                            ("md", "md"),
                            ("csv", "csv"),
                        ],
                    ),
                ),
                ("size_bytes", models.PositiveIntegerField()),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        max_length=20,
                        default="processing",
                        choices=[
                            ("processing", "processing"),
                            ("ready", "ready"),
                            ("failed", "failed"),
                        ],
                    ),
                ),
                ("url", models.URLField()),
                (
                    "organization",
                    models.ForeignKey(
                        to="organizations.organization",
                        on_delete=django.db.models.deletion.CASCADE,
                    ),
                ),
            ],
        ),
        # 2) DocumentChunk (pgvector)
        migrations.CreateModel(
            name="DocumentChunk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        primary_key=True,
                        default=uuid.uuid4,
                        editable=False,
                        serialize=False,
                    ),
                ),
                ("chunk_index", models.PositiveIntegerField()),
                ("content", models.TextField()),
                (
                    "embedding",
                    pgvector.django.vector.VectorField(dimensions=EMBEDDING_DIM),
                ),
                (
                    "document",
                    models.ForeignKey(
                        to="documents.document",
                        related_name="chunks",
                        on_delete=django.db.models.deletion.CASCADE,
                    ),
                ),
            ],
        ),
        # 3) B-tree helper indexes
        migrations.AddIndex(
            model_name="document",
            index=models.Index(
                fields=["organization", "upload_date"], name="doc_org_uploaddate_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="document",
            index=models.Index(
                fields=["organization", "name"], name="doc_org_name_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentchunk",
            index=models.Index(
                fields=["document", "chunk_index"], name="docchunk_doc_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="documentchunk",
            unique_together={("document", "chunk_index")},
        ),
        # 4) ANN index (IVFFlat) on cosine distance for fast kNN
        migrations.RunSQL(
            sql=(
                "CREATE INDEX IF NOT EXISTS docchunk_embedding_ivfflat "
                "ON documents_documentchunk USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);"
            ),
            reverse_sql="DROP INDEX IF EXISTS docchunk_embedding_ivfflat;",
        ),
    ]
